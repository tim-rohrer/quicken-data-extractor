import InvestmentAccountMapped, { InvestmentAccountOption } from "./InvestmentAccountMapped"

let quickenAccountData: any

const quickenAccountFixture = {
  ZACCOUNT: {
    Z_PK: 4,
    Z_ENT: 1,
    Z_OPT: 9832,
    ZACTIVE: 1,
    ZCANDIDATENOCASHTRANSACTIONS: null,
    ZCANDIDATESINGLEMUTUALFUND: null,
    ZCLOSED: 0,
    ZCONFIRMATIONNEEDED: null,
    ZCOSTBASISALGORITHMDEBT: null,
    ZCOSTBASISALGORITHMMUTUALFUND: null,
    ZCOSTBASISALGORITHMOPTION: null,
    ZCOSTBASISALGORITHMOTHER: null,
    ZCOSTBASISALGORITHMSTOCK: null,
    ZDELETIONCOUNT: 0,
    ZIMPORTQID: null,
    ZLASTCHECKNUM: null,
    ZLIQUIDITY: null,
    ZLOANCOMPOUNDINGPERIOD: 2,
    ZLOANHASBEENSETUP: 0,
    ZLOANHASOFFEREDTOCONVERTLIABILITY: 0,
    ZLOANPAYMENTFREQUENCY: 5,
    ZLOANPAYMENTPERIOD: 5,
    ZLOANRATETYPE: 0,
    ZLOANTERMTYPE: 1,
    ZLOANUSEMATURITYDATE: null,
    ZMOSTRECENTDOWNLOADSESSIONNUMBER: 2746,
    ZNOCASHTRANSACTIONS: null,
    ZOFXPAYMENTSENABLED: null,
    ZOFXTRANSFERDESTENABLED: 0,
    ZOFXTRANSFERSOURCEENABLED: 0,
    ZONLINEBANKINGACCOUNTINFOSESSIONNEEDED: 0,
    ZONLINEBANKINGACCOUNTISENABLED: 1,
    ZONLINEBANKINGACCOUNTISINBIDCHANGE: 0,
    ZONLINEBANKINGAWAITINGINITIALDOWNLOAD: 0,
    ZONLINEBANKINGCHANGEPINFIRSTCOMPLETED: 1,
    ZQUICKENID: 4,
    ZSCHEDULELOOKAHEADVALUE: 0,
    ZSIMPLEINVESTING: 0,
    ZSINGLEMUTUALFUND: null,
    ZSTATUSNUMATTEMPTS: 1,
    ZSTATUSTRANSACTIONCOUNT: 0,
    ZSYNCRESETREQUIRED: null,
    ZSYNCWITHCLOUD: 1,
    ZTAXABLE: 0,
    ZUSEDINAUTOUPDATES: 1,
    ZUSEDINREPORTS: 1,
    ZBILLPAYPAYMENTACCOUNT: null,
    ZBILLPAYPROVIDERINSTITUTION: null,
    ZCLOUDFILOGIN: 20,
    ZERROR: 8499,
    ZFINANCIALINSTITUTION: 23,
    ZLOANINTERESTCATEGORY: null,
    ZLOANSMARTTRANSACTION: null,
    ZCLOSEDDATE: null,
    ZCREATIONTIMESTAMP: 328303721.607089,
    ZLOANFIRSTPAYMENTDATE: null,
    ZLOANNEXTPAYMENTDATE: null,
    ZMODIFICATIONTIMESTAMP: 669138461.275845,
    ZONLINEBANKINGLASTCONNECTEDTIMESTAMP: 668823374.998559,
    ZONLINEBANKINGLEDGERBALANCEDATE: 668779200,
    ZREVIEWEDTIMESTAMP: null,
    ZCREDITLIMIT: 0,
    ZINTERESTRATE: null,
    ZLOANOPENINGBALANCE: 0,
    ZLOANTERM: 0,
    ZONLINEBANKINGLEDGERBALANCEAMOUNT: 19258.93,
    ZBANKROUTINGNUMBER: "SCHWAB.COM",
    ZBILLPAYROUTINGNUMBER: null,
    ZCHECKPRINTINGPROPERTIESJSON: null,
    ZCURRENCY: "USD",
    ZDATASOURCE: null,
    ZFILTERSJSON: null,
    ZGUID: "B71168ED-8245-4C5E-905C-789B89A9C903",
    ZIMPORTSOURCEFILEID: null,
    ZIMPORTSOURCEID: null,
    ZNAME: "Joint Brokerage",
    ZNOTES: null,
    ZNOTIFICATIONSJSON: null,
    ZOFXBILLPAYSERVICESTATUS: null,
    ZOFXLASTBANKMAILTOKEN: null,
    ZOFXLASTPAYMENTTOKEN: null,
    ZOFXLASTTRANSFERTOKEN: null,
    ZONLINEBANKINGACCOUNTNUMBER: "****X040",
    ZONLINEBANKINGAGGREGATORACCOUNTID: "22fb31a3-42ee-11ec-9fba-5e623eb33101",
    ZONLINEBANKINGCONNECTIONTYPE: "qcs",
    ZONLINEBANKINGCUSTOMERID: "timrohrer",
    ZONLINEBANKINGDTEND: null,
    ZONLINEBANKINGLASTTOKEN: "0",
    ZONLINEBANKINGLASTUUID: null,
    ZONLINEBANKINGOFXACCOUNTTYPE: "NORMAL",
    ZONLINEBANKINGPREVIOUSBID: null,
    ZONLINEBANKINGSERVERID: null,
    ZONLINEBILLPAYACCOUNTNUMBER: null,
    ZONLINEBILLPAYCONNECTIONTYPE: null,
    ZONLINEBILLPAYCUSTOMERID: null,
    ZONLINEBILLPAYOFXACCOUNTTYPE: null,
    ZRECONCILEINFOJSON: null,
    ZREGIONCODE: null,
    ZSCHEDULELOOKAHEADUNITTYPE: null,
    ZSYNCID: "299989964876550658",
    ZTYPENAME: "BROKERAGENORMAL",
    ZUSERDESCRIPTION: null,
    ZCHECKPRINTINGPROPERTIES: null,
    ZFILTERS: null,
    // ZFILTERS: <Buffer 62 70 6c 69 73 74 30 30 d4 01 02 03 04 05 06 07 0a 58 24 76 65 72 73 69 6f 6e 59 24 61 72 63 68 69 76 65 72 54 24 74 6f 70 58 24 6f 62 6a 65 63 74 73 ... 713 more bytes>,
    ZNOTIFICATIONS: null,
    ZRECONCILEINFO: null,
    // ZRECONCILEINFO: <Buffer 62 70 6c 69 73 74 30 30 d4 01 02 03 04 05 06 07 0a 58 24 76 65 72 73 69 6f 6e 59 24 61 72 63 68 69 76 65 72 54 24 74 6f 70 58 24 6f 62 6a 65 63 74 73 ... 899 more bytes>,
    ZANOMALOUSSYNCSTATUS: null,
    ZONLINEBANKINGACCOUNTNUMBERMASKED: "****X040",
    ZONLINEBANKINGAGGREGATIONPENDINGENABLEMENTINFO: null,
    ZONLINEBANKINGAGGREGATIONENABLEMENTCOUNT: 1,
    ZONLINEBANKINGAGGREGATIONDISABLEMENTCOUNT: 0,
    ZONLINEBANKINGACCOUNTDESCRIPTION: "Joint",
    ZAUTORECONCILE: 0,
    ZQ17SYNCID: "314078424778267136"
  },
  ZFINANCIALINSTITUTION: {
    Z_PK: 23,
    Z_ENT: 23,
    Z_OPT: 274,
    ZDIRECTCONNECTINSTITUTIONID: 0,
    ZPROFILEHASRUN: 0,
    ZPROFILEINV401KDOWNLOAD: 0,
    ZPROFILEPINCHANGEALLOWED: 0,
    ZPROFILEPINRULECASESENSITIVE: 0,
    ZPROFILEPINRULEMAX: -1,
    ZPROFILEPINRULEMIN: -1,
    ZPROFILEPINRULESPACESALLOWED: 0,
    ZPROFILEPINRULESPECIALCHARSALLOWED: 0,
    ZWASACTIVEINLASTFIDIRUPDATE: 1,
    ZBPFINANCIALINSTITUTION: null,
    ZLASTUPDATEDFROMFIDIRTIMESTAMP: 669138458.725092,
    ZBRANDINGINTU401KDNLDOPT: null,
    ZBRANDINGINTULOGINURL: null,
    ZDIRECTCONNECTBID: "68824",
    ZDIRECTCONNECTCONTACTPHONE: "866-855-9102",
    ZDIRECTCONNECTDCURL: null,
    ZDIRECTCONNECTINFOURL: "https://www.schwab.com/",
    ZDIRECTCONNECTORG: null,
    ZNAME: "Charles Schwab & Co., Inc.",
    ZOFXPROCESSINGDAYSOFF: null,
    ZPROFILEPINRULECHARTYPE: "ALPHAORNUMERIC"
  }
}

describe("Investment Account Mapper", () => {
  beforeAll(() => {
    quickenAccountData = quickenAccountFixture
  })
  it("instantiates with a property of Quicken Account Data", () => {
    const testAccountMapped = new InvestmentAccountMapped(quickenAccountData)

    expect(testAccountMapped).toHaveProperty("quickenData")
  })
  it("returns with the proper type set", () => {
    const testAccount = new InvestmentAccountMapped(quickenAccountData)
    
    expect(testAccount.type).toEqual(InvestmentAccountOption.BROKERAGE)
  })
  it("returns with closed date set", () => {
    const qTestAccount = {
      ...quickenAccountData,
      ZACCOUNT: {
        ...quickenAccountData.ZACCOUNT,
        ZCLOSEDDATE: new Date()
      }
    }

    const testAccount = new InvestmentAccountMapped(qTestAccount)
      
    expect(testAccount.closedDate).not.toBeNull()
  })
  it("should set the proper institution name", () => {
    const testAccount = new InvestmentAccountMapped(quickenAccountData)

    expect(testAccount.institutionName).toBe("Charles Schwab & Co., Inc.")

  })
})